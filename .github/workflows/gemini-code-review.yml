name: Gemini Code Review

on:
  push:
    branches: [ feature/gemini ]  # 자신의 브랜치 이름으로 변경
    paths:
      - 'backend/**'  # Kotlin 파일만 대상으로 지정
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**'

jobs:
  code-review: # code-review 라는 작업 정의
    runs-on: ubuntu-latest
    permissions:
      contents: read # 저장소 내용을 읽을 수 있는 권한
      pull-requests: write # PR에 코멘트를 작성할 수 있는 권한
    steps:
      - name: Checkout repository # 첫 번째 단계로, 저장소 코드를 워크플로우 환경으로
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Get changed files
        id: changed-files
        run: |
        # PR의 변경된 파일 목록 가져오기
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
        # Kotlin 파일만 필터링
          grep "\.kt$" changed_files.txt > kotlin_files.txt || true
          if [ -s kotlin_files.txt ]; then
            echo "KOTLIN_FILES_EXISTS=true" >> $GITHUB_ENV
          else
            echo "KOTLIN_FILES_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Review code with Gemini AI
        if: env.KOTLIN_FILES_EXISTS == 'true'
        id: gemini-review
        env:
#          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
        # Gemini API 설정
          GEMINI_ENDPOINT="https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}"
          
          # 코드 리뷰 결과를 저장할 변수
          REVIEW_COMMENT="## Gemini AI 코드 리뷰 결과\n\n"
          
          # 변경된 각 Kotlin 파일에 대해 코드 리뷰 실행
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              echo "리뷰 중: $file"
          
              # 파일 내용 가져오기
              FILE_CONTENT=$(cat "$file")
          
              # Gemini API 요청 본문 생성
              REQUEST_BODY=$(cat << EOF
              {
                "contents": [
                  {
                    "parts": [
                      {
                        "text":
                        "다음 Kotlin 코드를 검토하고 코드 품질, 가독성, 성능 및 보안 관점에서 개선점과 피드백을 제공해주세요. 
                        특별히 강조할 중요한 이슈가 있다면 먼저 언급해주세요. 
                        응답은 마크다운 형식의 간결한 한국어로 작성해주세요.\n\n파일 경로: ${file}\n\n코드:\n\`\`\`kotlin\n${FILE_CONTENT}\n\`\`\`"
                      }
                    ]
                  }
                ],
                "generationConfig": {
                  "temperature": 0.2,
                  "topK": 40,
                  "topP": 0.95,
                  "maxOutputTokens": 8192
                }
              }
              EOF
              )
          
              # Gemini API 호출
              RESPONSE=$(curl -s -X POST "$GEMINI_ENDPOINT" \
                -H "Content-Type: application/json" \
                -d "$REQUEST_BODY")
          
              # API 응답에서 텍스트 추출
              REVIEW_TEXT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          
              # 리뷰 결과 추가
              REVIEW_COMMENT+="### ${file}\n\n${REVIEW_TEXT}\n\n---\n\n"
            fi
          done < kotlin_files.txt
          
          # PR 코멘트용으로 파일에 저장
          echo "$REVIEW_COMMENT" > gemini_review.md
          
          # 코멘트가 너무 길면 자르기 (GitHub API 제한)
          if [ $(wc -c < gemini_review.md) -gt 65000 ]; then
            echo "리뷰 내용이 너무 깁니다. 요약 버전을 생성합니다."
            head -c 60000 gemini_review.md > gemini_review_truncated.md
            echo "\n\n... (리뷰가 너무 길어 잘렸습니다. 전체 리뷰는 워크플로우 아티팩트에서 확인하세요) ..." >> gemini_review_truncated.md
            mv gemini_review_truncated.md gemini_review.md
          fi

      - name: Upload review artifact
        if: env.KOTLIN_FILES_EXISTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gemini-code-review
          path: gemini_review.md

      - name: Add PR comment
        if: env.KOTLIN_FILES_EXISTS == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('gemini_review.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });

      - name: Print review results (for push events)
        if: env.KOTLIN_FILES_EXISTS == 'true' && github.event_name == 'push'
        run: |
          echo "===== Gemini Code Review Results ====="
          cat gemini_review.md
          echo "======================================"
